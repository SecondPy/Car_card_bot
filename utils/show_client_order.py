import asyncio
from aiogram import Bot, F, types, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from datetime import date, datetime, timedelta
from utils.client_main_menu import get_main_client_menu



from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot, F, types, Router


from database import orm_admin_query as admin_orm
from utils.datetime_formatter import DateFormatter
from kbds.callback import get_callback_btns



async def show_client_order(session: AsyncSession, state: FSMContext, bot: Bot, message, order, answer_text=''):
    services = [order.oil_m, order.grm, order.oil_kpp, order.spark_plugs, order.power_steer, order.coolant, order.break_fluid, order.fuel_filter]
    btn_inline_services = [
        {'oil_m':'–º–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ'}, 
        {'grm':'–ì–†–ú'}, 
        {'oil_kpp':'–º–∞—Å–ª–æ –∫–ø–ø'}, 
        {'spark_plugs':'c–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è'}, 
        {'power_steer':'–º–∞—Å–ª–æ –ì–£–†'}, 
        {'coolant':'–∞–Ω—Ç–∏—Ñ—Ä–∏–∑'}, 
        {'break_fluid':'—Ç–æ—Ä–º–æ–∑–Ω—É—é –∂–∏–¥–∫–æ—Å—Ç—å'}, 
        {'fuel_filter':'—Ñ–∏–ª—å—Ç—Ä —Ç–æ–ø–ª–∏–≤–Ω—ã–π'}
    ]

    btns_data, sizes = dict(), list()

    if order.mileage: answer_text += f'\n-üèÉüèº‚Äç‚ôÇÔ∏è <b>–ü—Ä–æ–±–µ–≥</b>: {order.mileage}\n'
    if order.advice: answer_text += f'-üó£ <b>—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>: {order.advice}\n\n'
    
    answer_text = answer_text or '–ù–∏–∫–∞–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ –±—ã–ª–æ'

    if {service for service in services if service}:
        answer_text += '\n<b>–ó–∞–º–µ–Ω–∏–ª–∏:</b>\n'
        for tab, service in enumerate(services):
            if service:
                answer_text += f"-üõ¢{''.join((btn_inline_services[tab].values()))}\n"
    
    if order.repair_photo and order.repair_photo != ' ':
        count_images = len(order.repair_photo.split())
        btns_data[f"show_client_repair_photo {order.id_order} {count_images}"] = f"üì∑ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ({count_images}) üì∑"
        sizes.append(1)

    answer_text = answer_text or 'ü§∑‚Äç‚ôÇÔ∏è –ù–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–∞—Ä—è–¥—É –≤–Ω–µ—Å–µ–Ω–æ –Ω–µ –±—ã–ª–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏'
    btns_data[f"main_menu_client"] = 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'
    sizes.append(1)

    await message.edit_text(text=answer_text, parse_mode=ParseMode.HTML)
    await message.edit_reply_markup(reply_markup=get_callback_btns(btns=btns_data, sizes=[1]*9+[2]+[1]))

