from datetime import date, datetime, timedelta
import random

from aiogram import Bot, F, types, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
#from database.models import Student
#from database.orm_admin_query import orm_add_product
from const_values import ABBREVIATED_WEEK_DAYS, ADMIN_GREETINGS
from sqlalchemy.ext.asyncio import AsyncSession


from database import orm_client_query as client_orm
from database import orm_admin_query as admin_orm

from kbds.callback import get_callback_btns



async def get_main_client_menu(session: AsyncSession, state: FSMContext, bot: Bot, message: types.Message, trigger) -> None:
    calendar_data = {}
    today = date.today()
    current_date = today - timedelta(days=(today.weekday()))
    last_date = current_date + timedelta(days=28)
    text = f'üóì –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ \nüì≤ –ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +78443210102 (9:00-18:00)\n\nüî¥ - –¥–µ–Ω—å –ø–æ–ª–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω\nüü† - –≤—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\nüü° - —Å—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞\nüü¢ - —Å–≤–æ–±–æ–¥–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 5 —á–∞—Å–æ–≤\n\nüõ¢ –ê–¥—Ä–µ—Å <b>–û–π–ª–¶–µ–Ω—Ç—Ä</b>: –í–æ–ª–∂—Å–∫–∏–π, –ø–ª –¢—Ä—É–¥–∞, 4–∞.\n\n‚¨áÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
    for _ in range(7):
        calendar_data[f'{ABBREVIATED_WEEK_DAYS[_]}'] = f"|{ABBREVIATED_WEEK_DAYS[_]}|"
    while current_date < last_date:
        if current_date < today:
            calendar_data[f"get_client_day {current_date.strftime('%Y-%m-%d')}"] = f"{current_date.strftime('%d.%m')}"
            text_button = f"{current_date.strftime('%d')}"
        else:
            orders_data = await admin_orm.orm_get_order_with_date(session, current_date)
            if orders_data and '–í—ã—Ö–æ–¥–Ω–æ–π' not in {order.description for order in orders_data}:
                hours = 0
                for order in orders_data:
                    hours += (order.ends - order.begins).total_seconds() // 3600
                if hours < 4: inline_smile = 'üü¢'
                elif hours < 9: inline_smile = 'üü°'
                elif hours < 17: inline_smile = 'üü†'
                else: inline_smile = 'üî¥'
                text_button = f"{current_date.strftime('%d')}{inline_smile}"
            else: text_button = f"{current_date.strftime('%d')}üü¢"
        calendar_data[f"get_client_day {current_date.strftime('%Y-%m-%d')}"] = text_button
        current_date += timedelta(days=1)

    calendar_data[f"main_menu_client"] = 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'
    if trigger == 'cancel':
        main_client_kb = await message.answer(text=f'–í—Å–µ —Å–±—Ä–æ—à–µ–Ω–æ üëå\n\n{text}', reply_markup=get_callback_btns(btns=calendar_data, sizes=[7]), parse_mode=ParseMode.HTML)
        bot.main_client_menu_ids[message.from_user.id] = main_client_kb.message_id
        await client_orm.add_inline_message_id(session, message.from_user.id, bot.main_client_menu_ids[message.from_user.id])
    else:
        try:
            await message.edit_text(inline_message_id=bot.main_client_menu_ids[message.from_user.id], text=text, parse_mode=ParseMode.HTML)
            await message.edit_reply_markup(inline_message_id=bot.main_client_menu_ids[message.from_user.id], reply_markup=get_callback_btns(btns=calendar_data, sizes=[7]), parse_mode=ParseMode.HTML)
        except Exception as e: # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            try:
                bot.main_client_menu_ids[message.from_user.id] = await client_orm.get_inline_message_id(session, message.from_user.id)
                await message.edit_text(inline_message_id=bot.main_client_menu_ids[message.from_user.id], text=text, parse_mode=ParseMode.HTML)
                await message.edit_reply_markup(inline_message_id=bot.main_client_menu_ids[message.from_user.id], reply_markup=get_callback_btns(btns=calendar_data, sizes=[7]), parse_mode=ParseMode.HTML)
            except Exception as e:
                print(f'oshibka>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<>>>>>>>>>>>> {e}')
                main_client_kb = await message.answer(text=text, reply_markup=get_callback_btns(btns=calendar_data, sizes=[7]), parse_mode=ParseMode.HTML)
                bot.main_client_menu_ids[message.from_user.id] = main_client_kb.message_id
                await client_orm.add_inline_message_id(session, message.from_user.id, bot.main_client_menu_ids[message.from_user.id])
    
    try: await state.clear()
    except: pass