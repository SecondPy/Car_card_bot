from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import kb_client, kb_reg, kb_permission, kb_cancel_state, kb_cancel_or_skip
from data_base import sqlite_db
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import datetime as dt
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import IDFilter
from aiogram.dispatcher.filters.state import State, StatesGroup

WELCOME_MESSAGE = \
'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n–ë–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ 700SHIN –≤ –≥.–í–æ–ª–∂—Å–∫–æ–º (–ø–µ—Ä–µ—É–ª–æ–∫ –°–∫–ª–∞–¥—Å–∫–æ–π, 3–∞).\n\n\
–° –µ–≥–æ –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Å–ª—É—á–∞–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –¢–û –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–∏—Å.\n\n\
–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É \n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è'

SUCCESSFUL_REGISTRATION_MESSAGE = '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n\n–†–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥–µ –¢–û? (–í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å)'

MY_CAR_MESSAGE = '–í –±–∞–∑–µ –∑–∞ –í–∞–º–∏ —á–∏—Å–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å {}\n{}'
MY_RECOMMENDATIONS_MESSAGE = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏:\n{}'
SEND_ORDER_MESSAGE = '–ö–ª–∏–µ–Ω—Ç –∂–µ–ª–∞–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!\n–¢–µ–ª: {}\n–ê–≤—Ç–æ: {}\nVIN: {}'

ID_STATE = {}
STRANGERS_PHONES = {}

class FSMAdmin(StatesGroup):
    get_permission = State()
    change_photo = State()

    get_order = State()

async def state_cancel_handler(message: types.Message, state: FSMContext):
    global ID_STATE
    client_id = str(message.from_user.id)
    if ID_STATE[client_id] == 'change_photo':
        await bot.send_message(478032098, f'–ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∞–≤—Ç–æ')
    current_state = await state.get_state()
    if ID_STATE[client_id] != 'get_order_from_stranger':
        ID_STATE[client_id] = False
        if current_state is None:
            await message.reply('–û–∫', reply_markup=kb_client)
        else:
            await state.finish()
            await message.reply('O–∫', reply_markup=kb_client)
    else:
        ID_STATE[client_id] = False
        if current_state is None:
            await message.reply('–û–∫', reply_markup=kb_reg)
        else:
            await state.finish()
            await message.reply('O–∫', reply_markup=kb_reg)
    
async def command_start(message : types.Message):
    try:
        user = message.from_user.id 
        check_user = await sqlite_db.check_user(user)
        if check_user == []:
            await bot.send_message(user, WELCOME_MESSAGE, reply_markup=kb_reg)
            await message.delete()
        else:
            await bot.send_message(message.from_user.id, '–ë–æ—Ç –∂–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', reply_markup=kb_client)
    except Exception as e:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: \nhttp://t.me/Car_Card_bot')
        print(e)

async def handler(contact: types.Contact):
    user_id = contact['contact']['user_id']
    user_phone = contact['contact']['phone_number'].replace('+', '')[1:]
    try:
        if await sqlite_db.client_registration(user_id, user_phone) == 'Nope':
            await bot.send_message(user_id, '–í–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –°–¢–û', reply_markup=InlineKeyboardMarkup().\
                add(InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–∏—Å/—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂/—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', callback_data=f'get_order {user_phone}')))
        else: 
            await bot.send_message(user_id, SUCCESSFUL_REGISTRATION_MESSAGE, reply_markup=kb_permission)
            global ID_STATE
            await FSMAdmin.get_permission.set()
            ID_STATE[user_id] = 'get_permission'
        await contact.delete()
    except Exception as e:
        print(e)
        await bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ.')

async def get_permission(message: types.Message, state: FSMContext):
    global ID_STATE
    if ID_STATE[message.from_user.id] == 'get_permission':
        if message.text == '–†–∞–∑—Ä–µ—à–∏—Ç—å':
            permission = True
        elif message.text == '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å':
            permission = False
        id = message.from_user.id
        await sqlite_db.load_permission(id, permission)
        await message.reply('–û–∫.\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É', reply_markup=kb_client)
        await state.finish()
        ID_STATE[message.from_user.id] = False

async def change_photo(message: types.Message, state: FSMContext):
    global ID_STATE
    client_id = str(message.from_user.id)
    if ID_STATE[client_id] == 'change_photo':
        photo = message.photo[0].file_id
        await sqlite_db.sql_load_new_car_photo_2(client_id, photo)
        car = await sqlite_db.find_client_car(client_id)
        if car[2] == True:
            permission = '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–û –≤–∫–ª—é—á–µ–Ω—ã'
        else: permission = '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–û –≤—ã–∫–ª—é—á–µ–Ω—ã'
        await bot.send_photo(client_id, car[1], MY_CAR_MESSAGE.format(car[0], permission), reply_markup=InlineKeyboardMarkup().\
            add(InlineKeyboardButton('‚úâÔ∏è –í–∫–ª\–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data=f'change_permission {client_id}')).\
                add(InlineKeyboardButton('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ', callback_data = f'change_photo {client_id}')))
        ID_STATE['client_id'] = False
        await state.finish()
        await message.delete()
        await bot.send_message(client_id, '–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ üëå', reply_markup=kb_client)
        await bot.send_photo(478032098, photo, f'–ö–ª–∏–µ–Ω—Ç {client_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', )

async def get_order(message: types.Message, state: FSMContext):
    global ID_STATE
    client_id = str(message.from_user.id)
    if ID_STATE[client_id] == 'get_order':
        client_car = await sqlite_db.find_client_car(client_id)
        if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await bot.send_message(-631794921, SEND_ORDER_MESSAGE.format(client_car[4], client_car[0], client_car[3]))
        else:
            await bot.send_message(-631794921, f'{SEND_ORDER_MESSAGE.format(client_car[4], client_car[0], client_car[3])} –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n{message.text}')
        await message.reply('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb_client)
            
    elif ID_STATE[client_id] == 'get_order_from_stranger':
        if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await bot.send_message(-631794921, f'–ö–ª–∏–µ–Ω—Ç c –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {STRANGERS_PHONES[client_id]}\n(–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ) –∂–µ–ª–∞–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è')
        else:
            await bot.send_message(-631794921, f'–ö–ª–∏–µ–Ω—Ç c –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {STRANGERS_PHONES[client_id]}\n(–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ) –∂–µ–ª–∞–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\nC –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n"{message.text}"')
        await message.reply('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb_reg)
        
    await state.finish()
    ID_STATE['client_id'] = False
            

async def answer(message : types.Message):
    client_id = message.from_user.id
    text = message.text
    cl_phone = await sqlite_db.find_client_car(client_id) # –ö–æ—Ä–æ—á–µ, –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ–Ω–µ–≥—Ä–µ—Ç. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å
    cl_phone = cl_phone[4]
    with open('log.txt', 'a+') as log:
        log.write(f'{dt.datetime.now().strftime("%d-%m-%Y %H:%M")}, {client_id}, –¢–µ–ª–µ—Ñ–æ–Ω: {cl_phone}, {text}\n')
        await bot.send_message(478032098, f'{dt.datetime.now().strftime("%d-%m-%Y %H:%M")}, {client_id}, –¢–µ–ª–µ—Ñ–æ–Ω: {cl_phone}, "{text}"')
    if message.text.lower() == '–º–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å':
        car = await sqlite_db.find_client_car(client_id)
        if car[2] == True:
            permission = '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–û –≤–∫–ª—é—á–µ–Ω—ã'
        else: permission = '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–û –≤—ã–∫–ª—é—á–µ–Ω—ã'
        await bot.send_photo(client_id, car[1], MY_CAR_MESSAGE.format(car[0], permission), reply_markup=InlineKeyboardMarkup().\
            add(InlineKeyboardButton('üì© –í–∫–ª\–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data=f'change_permission {client_id}')).\
                add(InlineKeyboardButton('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ', callback_data = f'change_photo {client_id}')))

    elif message.text.lower() == '—Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏':
        recommendations = await sqlite_db.sql_select_recommendations(client_id)
        if '—Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–º–æ–Ω—Ç—É –Ω–µ—Ç' in recommendations:
            await bot.send_message(client_id, recommendations)
        else:
            await bot.send_message(client_id, MY_RECOMMENDATIONS_MESSAGE.format(recommendations))

    elif '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in message.text.lower():
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –ø–æ–≤–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂") –∏–ª–∏ –∂–º–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–±—Å—É–¥–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é', reply_markup=kb_cancel_or_skip)
        await FSMAdmin.get_order.set()
        global ID_STATE
        ID_STATE[str(client_id)] = 'get_order'

    elif message.text.lower() == '–º–æ–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã':
        try:
            orders = await sqlite_db.sql_select_orders(client_id)
            inline_kb = InlineKeyboardMarkup(resize_keyboard=True)
            for o in orders:
                inline_kb = inline_kb.add(InlineKeyboardButton(f'üßæ {o[5]} –Ω–∞ —Å—É–º–º—É: {o[4]} —Ä—É–±–ª–µ–π.\n{o[6]}', callback_data=f'show {o[0]}'))
            await bot.send_message(client_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=inline_kb)
        except Exception as e:
            await message.reply('–ù–∞ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
            print(e)


async def change_permission(callback_query: types.CallbackQuery):
    global ID_STATE
    client_id = callback_query.data.replace('change_permission ', '')
    permission = await sqlite_db.find_client_car(client_id)
    permission = permission[2]
    if permission == True:
        await sqlite_db.load_permission(client_id, False)
        await callback_query.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã')
        await bot.send_message(478032098, f'–ö–ª–∏–µ–Ω—Ç {client_id} –≤—ã–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    else:
        await callback_query.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
        await sqlite_db.load_permission(client_id, True)
        await bot.send_message(478032098, f'–ö–ª–∏–µ–Ω—Ç {client_id} –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    car = await sqlite_db.find_client_car(client_id)
    if car[2] == True:
        permission = '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–û –≤–∫–ª—é—á–µ–Ω—ã'
    else: permission = '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¢–û –≤—ã–∫–ª—é—á–µ–Ω—ã'
    await bot.send_photo(client_id, car[1], MY_CAR_MESSAGE.format(car[0], permission), reply_markup=InlineKeyboardMarkup().\
            add(InlineKeyboardButton('üì© –í–∫–ª\–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data=f'change_permission {client_id}')).\
                add(InlineKeyboardButton('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ', callback_data = f'change_photo {client_id}')))

async def change_photo_query(callback_query: types.CallbackQuery):
    global ID_STATE
    id_client = callback_query.data.replace('change_photo ', '')
    ID_STATE[id_client] = 'change_photo'
    await FSMAdmin.change_photo.set()
    await bot.send_message(id_client, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã—Ö–æ–¥"', reply_markup=kb_cancel_state)
    await bot.send_message(478032098, f'–ö–ª–∏–µ–Ω—Ç {id_client} –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ')


async def show_callback_run(callback_query: types.CallbackQuery):
    order_data = await sqlite_db.sql_find_check(callback_query.data.replace('show ', ''))
    order_check = order_data[0][0]
    user_id = order_data[0][1]
    await callback_query.answer(show_alert=False)
    await bot.send_photo(user_id, order_check)

async def get_order_from_stranger(callback_query: types.CallbackQuery):
    global ID_STATE, STRANGERS_PHONES
    client_id = str(callback_query['from']['id'])
    await callback_query.answer(show_alert=False)
    await FSMAdmin.get_order.set()
    await bot.send_message(client_id, '–ù–∞–∑–æ–≤–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä "—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂")', reply_markup=kb_cancel_or_skip)
    ID_STATE[client_id] = 'get_order_from_stranger'
    STRANGERS_PHONES[client_id] = callback_query.data.replace('get_order ', '')

def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(command_start, commands = ['start', 'help'])
    dp.register_message_handler(handler, content_types=['contact'])
    dp.register_message_handler(answer, content_types=['text'])
    dp.register_message_handler(state_cancel_handler, state="*", commands='–í—ã—Ö–æ–¥')
    dp.register_message_handler(get_permission, state=FSMAdmin.get_permission)
    dp.register_message_handler(change_photo, content_types=['photo'], state=FSMAdmin.change_photo)
    dp.register_message_handler(get_order, state=FSMAdmin.get_order)

    dp.register_callback_query_handler(show_callback_run, lambda x: x.data and x.data.startswith('show '))
    dp.register_callback_query_handler(change_permission, lambda x: x.data and x.data.startswith('change_permission '))
    dp.register_callback_query_handler(change_photo_query, lambda x: x.data and x.data.startswith('change_photo '))
    dp.register_callback_query_handler(get_order_from_stranger, lambda x: x.data and x.data.startswith('get_order '))